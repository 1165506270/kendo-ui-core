using System;
using System.Text;
using System.ComponentModel;
using System.Collections.Generic;
using System.Web.UI;
using System.Web.Script.Serialization;

using Telerik.Web.UI<%= csharp_namespace == 'Telerik.Web.UI' ? ".#{root_component.owner_namespace}" : '' %>;

namespace <%= csharp_namespace %>
{
    /// <summary>
    /// <%= description %>
    /// </summary>
    public class <%= csharp_class %> : Telerik.Web.StateManager, IDefaultCheck
    {
        #region [ Properties ]
        #endregion [ Properties ]
    <% if has_composite_options? %>
        #region [ ViewState ]

        internal override void SetDirty()
        {
            base.SetDirty();
            #region [ SetDirty ]
            #endregion [ SetDirty ]
        }

        protected override void LoadViewState(object state)
        {
            object[] viewState = (object[])state;
            int i = 0;
            base.LoadViewState(viewState[i++]);
            #region [ LoadViewState ]
            #endregion [ LoadViewState ]
        }

        protected override object SaveViewState()
        {
            object[] viewState = new object[] {
                base.SaveViewState(),
                #region [ SaveViewState ]
                #endregion [ SaveViewState ]
            };
            return viewState;
        }

        protected override void TrackViewState()
        {
            base.TrackViewState();
            #region [ TrackViewState ]
            #endregion [ TrackViewState ]
        }

        #endregion [ ViewState ]
    <% end %>
        public bool IsDefault
        {
            get
            {
                return
                    #region [ IsDefault ]
                    #endregion [ IsDefault ]
            }
        }<% if serialize_to_array %>

        #region [ ToArray ]
        #endregion [ ToArray ]<% end %>
    }
}
