// Type definitions for Kendo UI

module kendo {
    class Observable {
        bind(eventName: string, handler: Function): Observable;
        one(eventName: string, handler: Function): Observable;
        trigger(eventName: string, e?: any): bool;
        unbind(eventName: string, handler?: any): Observable;
    }
}

module kendo.data {
    class ObservableObject extends Observable{
        constructor(value?: any);
        get(name: string): any;
        parent(): ObservableObject;
        set(name: string, value: any): void;
        toJSON(): { [key: string]: any; };
    }

    class Model extends ObservableObject {
        constructor(data?: any);
        dirty: bool;
        id: any;
        uid: string;
        editable(field: string): bool;
        isNew(): bool;
    }

    class Node extends Model {
        children: HierarchicalDataSource;

        append(model: any): void;
        level(): number;
        load(id: any): void;
        loaded(value: bool): void;
        loaded(): bool;
        parentNode(): Node;
    }

    class HierarchicalDataSource extends DataSource {
    }

    interface HierarchicalDataSourceOptions extends DataSourceOptions {
    }

    interface DataSourceSchema {
        model?: DataSourceSchemaModel;
    }

    interface DataSourceSchemaModel {
        id?: string;
        fields?: DataSourceSchemaModelField[];
    }

    interface DataSourceSchemaModelField {
        name?: string;
        defaultValue?: any;
        editable?: bool;
        nullable?: bool;
        parse?: Function;
        type?: string;
        validation?: DataSourceSchemaModelFieldValidation;
    }

    interface DataSourceSchemaModelFieldValidation {
        required?: bool;
        min?: any;
        max?: any;
    }

    class ObservableArray extends Observable {
        constructor(array?: any[]);
        length: number;
        join(separator: string): string;
        parent(): ObservableObject;
        pop(): ObservableObject;
        push(...items: any[]): number;
        slice(begin: number, end?: number): any[];
        splice(start: number): any[];
        splice(start: number, deleteCount: number, ...items: any[]): any[];
        shift(): any;
        toJSON(): any[];
        unshift(...items: any[]): number;
    }
}

module kendo.ui {
    class Widget extends Observable {
    }
}

module kendo.mobile.ui {
    class Widget extends kendo.ui.Widget {
    }

    interface TouchAxis {
        location?: number;
        startLocation?: number;
        client?: number;
        delta?: number;
        velocity?: number;
    }

    interface TouchEventOptions {
        target?: JQuery;
        x?: TouchAxis;
        y?: TouchAxis;
    }

    interface Point {
        x?: number;
        y?: number;
    }
}

% namespaces.keys.each do |key|
module <%= key %> {
%   namespaces[key].each do |component|
<%= component.type_script_class %>

%   end
}
% end

interface JQueryXHR {
}

interface JQuery {
% components.each do |component|
% if component.full_name.include?('ui')
    kendo<%= component.plugin%>(): JQuery;
    kendo<%= component.plugin%>(options: <%= component.namespace %>.<%= component.type_script_options_type%>): JQuery;

% end
% end
}
