{! Link.base = "../"; /* all generated links will be relative to this */ !}
{+subtemplate("subtemplates/head.tmpl", {subtitle: data.alias})+}
{+subtemplate("subtemplates/menu.tmpl")+}
<div class="content">
    <div class="innerContent">
        <h1 class="classTitle">
            {!
                var classType = "";

                if (data.isBuiltin()) {
                    classType += "Built-In ";
                }

                if (data.isNamespace) {
                    if (data.is('FUNCTION')) {
                        classType += "Function ";
                    }
                    classType += "Namespace ";
                } else {
                    classType += "Class ";
                }
            !}
            {+classType+}<span>{+data.alias+}</span>
        </h1>

        <div class="intro">
            <p class="desc summary">
               {+resolveLinks(data.classDesc)+}
            </p>

            <if test="data.version || !data.isBuiltin() || data.augments.length">
                <ul class="summary">
                    <if test="data.version">
                        <li>Version {+ data.version +}</li>
                    </if>

                    <if test="!data.isBuiltin()">{# isn't defined in any file #}
                        <li>Defined in: {+new Link().toSrc(data.srcFile)+}</li>
                    </if>
                        <if test="data.augments.length"><li>Extends <span class="fixedFont">
                        {+
                            data.augments
                            .sort()
                            .map(
                                function($) { return new Link().toSymbol($); }
                            )
                            .join(", ")
                        +}</span></li>
                    </if>
                </ul>
            </if>
        </div>


        <if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
            <div class="props">
                <table class="summaryTable" summary="A summary of the constructor documented in the class {+data.alias+}.">
                    <caption class="sectionTitle">{+classType+}Summary</caption>
                    <thead>
                        <tr>
                            <th scope="col">Constructor Attributes</th>
                            <th scope="col">Constructor Name and Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="attributes">{!
                                if (data.isPrivate) output += "&lt;private&gt; ";
                                if (data.isInner) output += "&lt;inner&gt; ";
                            !}&nbsp;</td>
                            <td class="nameDescription" {!if (data.comment.getTag("hilited").length){output += 'style="color: red"'}!}>
                                <div class="fixedFont">
                                    <code>{+ new Link().toSymbol(data.alias).inner('constructor')+}</code><if test="classType != 'Namespace '">{+ makeSignature(data.params) +}</if>
                                </div>
                                <div class="desc">{+resolveLinks(summarize(data.desc))+}</div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </if>

        <if test="data.properties.length">
            {! var ownProperties = data.properties.filter(function($){return $.memberOf == data.alias && !$.isNamespace && $.name != "Description" }).sort(makeSortby("name")); !}
            <if test="ownProperties.length">
                <div class="props">
                    <table class="summaryTable" cellspacing="0" summary="A summary of the fields documented in the class {+data.alias+}.">
                        <caption class="sectionTitle">Field Summary</caption>

                        <thead>
                            <tr>
                                <th scope="col">Field Attributes</th>
                                <th scope="col">Field Name and Description</th>
                            </tr>
                        </thead>

                        <tbody>
                            <for each="member" in="ownProperties">
                                <tr>
                                    <td class="attributes">{!
                                        if (member.isPrivate) output += "&lt;private&gt; ";
                                        if (member.isInner) output += "&lt;inner&gt; ";
                                        if (member.isConstant) output += "&lt;constant&gt; ";
                                    !}&nbsp;</td>
                                    <td class="nameDescription">
                                        <div class="fixedFont">
                                        <if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if><code>{+new Link().toSymbol(member.alias).withText(member.name)+}</code>
                                        </div>
                                        <div class="desc">{+resolveLinks(summarize(member.desc))+}</div>
                                    </td>
                                </tr>
                            </for>
                        </tbody>
                    </table>
                </div>
            </if>

            <if test="data.inheritsFrom.length">
                <dl class="inheritsList">
                {!
                    var borrowedMembers = data.properties.filter(function($) {return $.memberOf != data.alias});

                    var contributers = [];
                    borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
                    for (var i = 0, l = contributers.length; i < l; i++) {
                        output +=
                            "<dt>Fields borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
                            +
                            "<dd>" +
                            borrowedMembers
                            .filter(
                                function($) { return $.memberOf == contributers[i] }
                            )
                            .sort(makeSortby("name"))
                            .map(
                                function($) { return new Link().toSymbol($.alias).withText($.name) }
                            )
                            .join(", ")
                            +
                            "</dd>";
                    }
                !}
                </dl>
            </if>
        </if>

        <if test="data.methods.length">
            {! var ownMethods = data.methods.filter(function($){return $.memberOf == data.alias  && !$.isNamespace}).sort(makeSortby("name")); !}

            <div class="props">
                <h2 class="sectionTitle">Method Summary</h2>

                <if test="ownMethods.length">
                    <table class="summaryTable" id="MethodsList" cellspacing="0" summary="A summary of the methods documented in the class {+data.alias+}.">
                        <thead>
                            <tr>
                                <th scope="col">Method Attributes</th>
                                <th scope="col">Method Name and Description</th>
                            </tr>
                        </thead>

                        <tbody>
                            {!
                                var methodSummaryCount = 0;
                            !}
                            <for each="member" in="ownMethods">
                                <tr
                                    {!
                                        output += " class='item"+ methodSummaryCount +"'";
                                        methodSummaryCount++
                                    !}
                                >
                                    <td class="attributes">{!
                                        if (member.isPrivate) output += "&lt;private&gt; ";
                                        if (member.isInner) output += "&lt;inner&gt; ";
                                    !}&nbsp;</td>
                                    <td class="nameDescription">
                                        <div class="fixedFont"><if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if><code>{+new Link().toSymbol(member.alias).withText(member.name.replace(/\^\d+$/, ''))+}</code>{+makeSignature(member.params)+}
                                        </div>
                                        <div class="desc">{+resolveLinks(summarize(member.desc))+}</div>
                                    </td>
                                </tr>
                            </for>
                        </tbody>
                    </table>
                </if>

                <if test="data.inheritsFrom.length">
                    <dl class="inheritsList" id="MethodsListInherited">
                    {!
                        var borrowedMembers = data.methods.filter(function($) {return $.memberOf != data.alias});
                        var contributers = [];
                        borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
                        for (var i = 0, l = contributers.length; i < l; i++) {
                            output +=
                                "<dt>Methods borrowed from class <span class='fixedFont'>"+new Link().toSymbol(contributers[i])+"</span>: </dt>"
                                +
                                borrowedMembers
                                .filter(
                                    function($) { return $.memberOf == contributers[i] }
                                )
                                .sort(makeSortby("name"))
                                .map(
                                    function($) {
                                        var link = "";
                                        link += "<dd><span class='fixedFont'>";
                                        link += new Link().toSymbol($.alias).withText($.name);
                                        link += "</span></dd>";
                                        return link;
                                    }
                                )
                                .join(" ");
                        }
                    !}
                    </dl>
                </if>
            </div>
        </if>

        <if test="data.events.length">
            {! var ownEvents = data.events.filter(function($){return !$.isNamespace}).sort(makeSortby("name")); !}
            <if test="ownEvents.length">
            <div class="props">
                <table class="summaryTable" cellspacing="0" summary="A summary of the events documented in the class {+data.alias+}.">
                    <caption class="sectionTitle">Event Summary</caption>

                    <thead>
                        <tr>
                            <th scope="col">Event Attributes</th>
                            <th scope="col">Event Name and Description</th>
                        </tr>
                    </thead>

                    <tbody>
                        <for each="member" in="ownEvents">
                            <tr>
                                <td class="attributes">{!
                                    if (member.isPrivate) output += "&lt;private&gt; ";
                                    if (member.isInner) output += "&lt;inner&gt; ";
                                !}&nbsp;</td>
                                <td class="nameDescription">
                                    <div class="fixedFont"><if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if><code>{+new Link().toSymbol(member.alias).withText(member.name)+}</code>{+makeSignature(member.params)+}
                                    </div>
                                    <div class="desc">{+resolveLinks(summarize(member.desc))+}</div>
                                </td>
                            </tr>
                        </for>
                    </tbody>
                </table>
            </div>
            </if>

            <if test="data.inheritsFrom.length">
                <dl class="inheritsList">
                {!
                    var borrowedMembers = data.events.filter(function($) {return $.memberOf != data.alias});
                    var contributers = [];
                    borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
                    for (var i = 0, l = contributers.length; i < l; i++) {
                        output +=
                            "<dt>Events borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
                            +
                            "<dd>" +
                            borrowedMembers
                            .filter(
                                function($) { return $.memberOf == contributers[i] }
                            )
                            .sort(makeSortby("name"))
                            .map(
                                function($) { return new Link().toSymbol($.alias).withText($.name) }
                            )
                            .join(", ")
                            +
                            "</dd>";
                    }

                !}
                </dl>
            </if>
        </if>

        {!
            var ownOptions = data.comment.getTag("option")
                exampleRe = /[\r\n]?_example(([\r\n]|.)*)/i;

            if (defined(ownOptions) && ownOptions.length) {
                ownOptions.forEach(function (value, idx) {
                    var description = /\[(.*)\]/i.exec(ownOptions[idx].desc);
                    description && (ownOptions[idx].name = description[1]);

                    var defaultValue = /]\s*\<(.*)\>/i.exec(ownOptions[idx].desc);
                    defaultValue && (ownOptions[idx].defaultValue = defaultValue[1]);

                    ownOptions[idx].desc = ownOptions[idx].desc.replace(/^(\[[^\]]*\])?\s*(\<[^\>]*\>)?/i, "");
                    ownOptions[idx].isOptional = true;

                    var example = exampleRe.exec(ownOptions[idx].desc);

                    if (example) {
                        ownOptions[idx].example = [example[1].trim()];
                        ownOptions[idx].desc = ownOptions[idx].desc.replace(exampleRe, "");
                    }
                });

                ownOptions.sort(makeSortby("name"));

                var rootOptions = [];

                // add suboptions and determine root-level options
                for (var i = 0; i < ownOptions.length; i++) {
                    var currentOption = ownOptions[i],
                        currentOptionName = currentOption.name,
                        subOptions = [];

                    for (var j = i+1; j < ownOptions.length; j++) {
                        var name = ownOptions[j].name;

                        if (name.indexOf(currentOptionName + ".") == 0 && name.substring(currentOptionName.length + 1).indexOf('.') < 0) {
                            subOptions.push(ownOptions[j]);
                        }
                    }

                    if (subOptions.length) {
                        currentOption.subOptions = subOptions;
                    }

                    if (currentOptionName.indexOf(".") < 0) {
                        rootOptions.push(currentOption);
                    }
                }

                ownOptions = rootOptions;

                // remove prefixes of suboptions

                function removeRedundantPrefixes(options, containerName) {
                    for (var i = 0; i < options.length; i++) {
                        if (containerName && options[i].name.indexOf(containerName) == 0) {
                            options[i].name = options[i].name.substring(containerName.length);
                        }

                        if (options[i].subOptions) {
                            removeRedundantPrefixes(options[i].subOptions, containerName + options[i].name + ".");
                        }
                    }
                }

                removeRedundantPrefixes(ownOptions, "");
            }
        !}

        <div id="codeStrip">
        <ul>
            <if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
                <li>Description</li>
            </if>
            <!-- help-tabs -->
            <if test="defined(ownOptions) && ownOptions.length">
                <li>Configuration ({+ ownOptions.length +})</li>
            </if>
            <if test="defined(ownProperties) && ownProperties.length">
                <li>Fields ({+ ownProperties.length +})</li>
            </if>
            <if test="defined(ownMethods) && ownMethods.length">
                <li>Methods ({+ ownMethods.length +})</li>
            </if>
            <if test="defined(ownEvents) && ownEvents.length">
                <li>Events ({+ ownEvents.length +})</li>
            </if>
            <!-- help-tabs -->
        </ul>
        <!-- description -->
        <div class="description">
        {!
            var description = data.properties.filter(function(x) { return x._name == "Description"; })[0];

            function htmlEncode(value) {
                return ("" + value).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;");
            }

            if (description) {
                description = description.comment;

                for (var i in description.tags) {
                    var tag = description.tags[i];

                    switch (tag.title) {
                        case "exampleTitle":
                            output += '<div class="code-sample"><h4 class="code-title">' + tag.desc + '</h4>';
                        break;

                        case "example":
                            output += '<pre class="code prettyprint"><code>' + htmlEncode(tag.desc) + '</code></pre></div>';
                        break;

                        case "section":
                            output += (/<[^>]+>/g.test(tag.desc) ? tag.desc : "<p>" + tag.desc + "</p>");
                        break;
                    }
                }
            }
        !}
        </div>
        <!-- description -->
{!
    // Simple JavaScript Templating
    // John Resig - http://ejohn.org/ - MIT Licensed
    (function(){
      var cache = {};

      this.tmpl = function tmpl(str, data){
        // Figure out if we're getting a template, or if we need to
        // load the template - and be sure to cache the result.
        var fn = !/\W/.test(str) ?
          cache[str] = cache[str] ||
            tmpl(document.getElementById(str).innerHTML) :

          // Generate a reusable function that will serve as a template
          // generator (and which will be cached).
          new Function("obj",
            "var p=[],print=function(){p.push.apply(p,arguments);};" +

            // Introduce the data as local variables using with(){}
            "with(obj){p.push('" +

            // Convert the template into pure JavaScript
            str
              .replace(/[\r\t\n]/g, " ")
              .split("<%").join("\t")
              .replace(/((^|%>)[^\t]*)'/g, "$1\r")
              .replace(/\t=(.*?)%>/g, "',$1,'")
              .split("\t").join("');")
              .split("%>").join("p.push('")
              .split("\r").join("\\'")
          + "');}return p.join('');");

        // Provide some basic currying to the user
        return data ? fn( data ) : fn;
      };
    })();


    function extend () {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;
        if (typeof target === "boolean") {
            deep = target;
            target = arguments[1] || {};
            i = 2;
        }
        if (typeof target !== "object" && !jQuery.isFunction(target)) {
            target = {};
        }
        if (length === i) {
            target = this;
            --i;
        }
        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue;
                    }
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }
                        target[name] = jQuery.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    }


    var optionsTemplate = tmpl(
        '<div class="detailHandle">' +
            '<div class="detailCollapsed"></div>' +
            '<a name="<%= name %>"><code class="symbol"><%= name %></code></a>' +
            '<%= type ? \': <span class="type">\' + type + \'</span>\' : \'\' %>' +
            '<%= defaultValue ? \'<span class="defaultValue">(default: \' + defaultValue + \')</span>\' : \'\' %>' +
        '</div>' +
        '<div class="detailBody">' +
            '<div class="desc"><%= desc %></div>' +
            '<% for (var exampleIdx = 0; typeof example != "undefined" && exampleIdx < example.length; exampleIdx++) { %>' +
                '<div class="code-sample">' +
                    '<h4 class="code-title">Example</h4>' +
                    '<pre class="code prettyprint lang-js"><code><%= example[exampleIdx] %></code></pre>' +
                '</div>' +
            '<% } %>' +
            '<%= typeof subOptions != "undefined" ? renderChildOptions(subOptions) : "" %>' +
        '</div>'
    );

    function sectionDistribution(options) {
        var result = {};

        // nest options
        for (var idx = 0; idx < ownOptions.length; idx++) {
            var currentName = ownOptions[idx].name;

            var nameSplit = currentName.split('.');

            var currentNamespace = result;

            for (var j = 0; j < nameSplit.length; j++) {
                currentNamespace = currentNamespace[nameSplit[j]] = currentNamespace[nameSplit[j]] || { index: idx };
            }
        }

        return result;
    }

    function renderOptions (options) {
        var html = "";

        for (var i in options) {
            html += optionsTemplate(extend({
                renderChildOptions: renderOptions
            }, options[i]));
        }

        return html;
    }
!}

        <!-- help-data -->

        <if test="defined(ownOptions) && ownOptions.length">
            <div class="optionsContainer">
                <!-- configuration -->
                {# options are rendered through js + micro-templates in order to achieve recursive template rendering #}
                {+ renderOptions(ownOptions) +}
                <!-- configuration -->
            </div>
        </if>

        <if test="defined(ownProperties) && ownProperties.length">
            <div class="propertiesContainer">
                <!-- properties -->
                <for each="member" in="ownProperties">
                    <div class="detailHandle">
                        <div class="detailCollapsed"></div>
                        <a name="{+ member.name +}"><code>{+member.name+}</code></a>

                        <if test="member.type">: <span class="type">{+new Link().toSymbol(member.type)+}</span></if>
                        <if test="member.defaultValue"><span class="defaultValue">(default: {+resolveLinks(member.defaultValue)+})</span></if>
                    </div>
                    <div class="detailBody">
                        <div class="desc">{+resolveLinks(member.desc)+}</div>

                        <if test="member.srcFile && member.srcFile != data.srcFile">
                            <br />
                            <i>Defined in: </i> {+new Link().toSrc(member.srcFile)+}.
                        </if>

                        <if test="member.example && member.example.length">
                            <for each="example" in="member.example">
                                <div class="code-sample">
                                    <h4 class="code-title">Example</h4>
                                    <pre class="code prettyprint lang-js"><code>{+example+}</code></pre>
                                </div>
                            </for>
                        </if>

                        <if test="member.deprecated || member.since || member.see">
                            <dl class="detailList">
                                <if test="member.deprecated">
                                    <dt class="heading">Deprecated:</dt>
                                    <dt>{+ resolveLinks(member.deprecated) +}</dt>
                                </if>
                                <if test="member.since">
                                    <dt class="heading">Since:</dt>
                                    <dd>{+ member.since +}</dd>
                                </if>
                                <if test="member.see && member.see.length">
                                    <dt class="heading">See:</dt>
                                    <for each="item" in="member.see">
                                        <dd>{+ new Link().toSymbol(item) +}</dd>
                                    </for>
                                </if>
                            </dl>
                        </if>
                    </div>
                </for>
                <!-- properties -->
            </div>
        </if>

        <if test="defined(ownMethods) && ownMethods.length">
            <div class="methodsContainer">
                <!-- methods -->
                <ul class="methodDetail" id="MethodDetail">
                    <for each="member" in="ownMethods">
                        <li>
                            <div class="detailHandle">
                                <div class="detailCollapsed"></div>
                                <a name="{+ member.name +}"><code>{+member.name.replace(/\^\d+$/, '')+}</code></a> {+makeSignature(member.params)+}

                                <if test="member.type">: <span class="type">{+new Link().toSymbol(member.type)+}</span></if>
                            </div>
                            <div class="detailBody">
                                <div class="desc">
                                    {+resolveLinks(member.desc)+}

                                    <if test="member.srcFile != data.srcFile">
                                        <br />
                                        <i>Defined in: </i> {+new Link().toSrc(member.srcFile)+}.
                                    </if>
                                </div>

                                <if test="member.example && member.example.length">
                                    <for each="example" in="member.example">
                                        <div class="code-sample">
                                            <h4 class="code-title">Example</h4>
                                            <pre class="code prettyprint lang-js"><code>{+example+}</code></pre>
                                        </div>
                                    </for>
                                </if>

                                <if test="member.params.length">
                                <div class="details-list">
                                    <h4 class="details-title">Parameters</h4>
                                    <dl>
                                    <for each="item" in="member.params">
                                        <dt>
                                            <code>{+item.name+}</code>{+((item.type)?"<span class=\"light fixedFont\">: "+(new Link().toSymbol(item.type))+"</span> " : "")+}
                                            <if test="item.isOptional">(<i>optional<if test="item.defaultValue">, default: {+item.defaultValue+}</if></i>)</if>
                                        </dt>
                                        <dd>{+resolveLinks(item.desc)+}</dd>
                                    </for>
                                    </dl>
                                </div>
                                </if>

                                <if test="member.deprecated || member.since || member.exceptions.length || member.returns.length || member.requires.length || member.see.length">
                                    <dl class="detailList">
                                        <if test="member.deprecated">
                                            <dt class="heading">Deprecated:</dt>
                                            <dt>{+ resolveLinks(member.deprecated) +}</dt>
                                        </if>

                                        <if test="member.since">
                                            <dt class="heading">Since:</dt>
                                            <dd>{+ member.since +}</dd>
                                        </if>

                                        <if test="member.returns.length">
                                            <dt class="heading">Returns</dt>
                                            <for each="item" in="member.returns">
                                                <dd>{+((item.type)?"<span class=\"light fixedFont\">"+(new Link().toSymbol(item.type))+"</span> " : "")+}{+resolveLinks(item.desc)+}</dd>
                                            </for>
                                        </if>

                                        <if test="member.requires.length">
                                            <dt class="heading">Requires:</dt>
                                            <for each="item" in="member.requires">
                                                <dd>{+ resolveLinks(item) +}</dd>
                                            </for>
                                        </if>

                                        <if test="member.see.length">
                                            <dt class="heading">See:</dt>
                                            <for each="item" in="member.see">
                                                <dd>{+ new Link().toSymbol(item) +}</dd>
                                            </for>
                                        </if>

                                    </dl>
                                </if>
                            </div>
                        </li>
                    </for>
                </ul>
                <!-- methods -->
            </div>
        </if>

        <if test="defined(ownEvents) && ownEvents.length">
            <div class="eventsContainer">
                <!-- events -->
                <for each="member" in="ownEvents">
                    <div class="detailHandle">
                        <div class="detailCollapsed"></div>
                        <a name="{+ member.name +}"><code>{+member.name+}</code></a>
                    </div>
                    <div class="detailBody">
                        <div class="desc">
                            {+resolveLinks(member.desc)+}

                            <if test="member.srcFile != data.srcFile">
                                <br />
                                <i>Defined in: </i> {+new Link().toSrc(member.srcFile)+}.
                            </if>
                        </div>

                        <if test="member.example && member.example.length">
                            <for each="example" in="member.example">
                                <div class="code-sample">
                                    <h4 class="code-title">Example</h4>
                                    <pre class="code prettyprint lang-js"><code>{+example+}</code></pre>
                                </div>
                            </for>
                        </if>

                        <if test="member.params.length > 1">
                            <div class="details-list">
                                <h4 class="details-title">Event data</h4>
                                <dl>
                                <for each="item" in="member.params">
                                    <if test="item.name != 'e'">
                                    <dt>
                                        <code>{+item.name.replace(/^e\./i,"")+}</code>
                                        {+((item.type)?"<span class=\"type\">: " + item.type + "</span> " : "")+}
                                        <if test="item.isOptional"><i>optional<if test="item.defaultValue">, default: {+item.defaultValue+}</if></i></if>
                                    </dt>
                                    <dd>{+ resolveLinks(item.desc) +}</dd>
                                    </if>
                                </for>
                                </dl>
                            </div>
                        </if>

                        <if test="member.returns.length">
                        <div class="returns">
                            <strong>Returns</strong>
                            <span>{+((member.returns[0].type)?"<span class=\"light fixedFont\">"+(new Link().toSymbol(member.returns[0].type))+"</span> " : "")+}{+resolveLinks(member.returns[0].desc)+}</span>
                        </div>
                        </if>

                        <if test="member.deprecated || member.since || member.exceptions.length || member.see.length">
                            <dl class="detailList">
                                <if test="member.deprecated">
                                    <dt class="heading">Deprecated:</dt>
                                    <dt>{+ resolveLinks(member.deprecated) +}</dt>
                                </if>

                                <if test="member.since">
                                    <dt class="heading">Since:</dt>
                                    <dd>{+ member.since +}</dd>
                                </if>


                                <if test="member.requires.length">
                                    <dt class="heading">Requires:</dt>
                                    <for each="item" in="member.requires">
                                        <dd>{+ resolveLinks(item) +}</dd>
                                    </for>
                                </if>

                                <if test="member.see.length">
                                    <dt class="heading">See:</dt>
                                    <for each="item" in="member.see">
                                        <dd>{+ new Link().toSymbol(item) +}</dd>
                                    </for>
                                </if>
                            </dl>
                        </if>
                    </div>
                </for>
                <!-- events -->
            </div>
        </if>
        <!-- help-data -->
        </div>
    </div>
</div>
{+subtemplate("subtemplates/foot.tmpl")+}
