{!
    var ownOptions = data.comment.getTag("option")
        exampleTitleRe = /^[\r\n]?_exampleTitle(.*)/i,
        exampleRe = /[\r\n]?_example(([\r\n]|.)*)/i;

    if (defined(ownOptions) && ownOptions.length) {
        ownOptions.forEach(function (value, idx) {
            var description = /\[(.*)\]/i.exec(ownOptions[idx].desc);
            description && (ownOptions[idx].name = description[1]);

            var defaultValue = /]\s*\<(.*)\>/i.exec(ownOptions[idx].desc);
            defaultValue && (ownOptions[idx].defaultValue = defaultValue[1]);

            ownOptions[idx].desc = ownOptions[idx].desc.replace(/^(\[[^\]]*\])?\s*(\<[^\>]*\>)?/i, "");
            ownOptions[idx].isOptional = true;

            // extract examples and example titles from option descriptions
            var description = ownOptions[idx].desc,
                examples = [],
                exampleTitles = [];

            function extractExamples(content) {
                var allExamples = exampleRe.exec(content);

                if (allExamples) {
                    exampleTitle = exampleTitleRe.exec(allExamples);

                    if (exampleTitle) {
                        exampleTitle = exampleTitle[1];
                        allExamples = exampleRe.exec(allExamples[0].replace(exampleTitleRe, "").trim());
                    } else {
                        exampleTitle = "Example";
                    }

                    exampleTitles.push(exampleTitle);

                    if (exampleRe.test(allExamples[1])) {
                        examples.push(allExamples[1].substring(0, allExamples[1].indexOf("_example")).trim());
                        extractExamples(allExamples[1]);
                    } else {
                        examples.push(allExamples[1].trim());
                    }
                }
            }

            extractExamples(description);

            ownOptions[idx].desc = description.replace(exampleRe, "");
            ownOptions[idx].example = examples;
            ownOptions[idx].exampleTitle = exampleTitles;
        });

        ownOptions.sort(makeSortby("name"));

        var rootOptions = [];

        // add suboptions and determine root-level options
        for (var i = 0; i < ownOptions.length; i++) {
            var currentOption = ownOptions[i],
                currentOptionName = currentOption.name,
                subOptions = [];

            for (var j = i+1; j < ownOptions.length; j++) {
                var name = ownOptions[j].name;

                if (name.indexOf(currentOptionName + ".") == 0 && name.substring(currentOptionName.length + 1).indexOf('.') < 0) {
                    subOptions.push(ownOptions[j]);
                }
            }

            if (subOptions.length) {
                currentOption.subOptions = subOptions;
            }

            if (currentOptionName.indexOf(".") < 0) {
                rootOptions.push(currentOption);
            }
        }

        ownOptions = rootOptions;

        // remove prefixes of suboptions

        function removeRedundantPrefixes(options, containerName) {
            for (var i = 0; i < options.length; i++) {
                if (containerName && options[i].name.indexOf(containerName) == 0) {
                    options[i].name = options[i].name.substring(containerName.length);
                }

                if (options[i].subOptions) {
                    removeRedundantPrefixes(options[i].subOptions, containerName + options[i].name + ".");
                }
            }
        }

        removeRedundantPrefixes(ownOptions, "");
    }

    // Simple JavaScript Templating
    // John Resig - http://ejohn.org/ - MIT Licensed
    (function(){
      var cache = {};

      this.tmpl = function tmpl(str, data){
        // Figure out if we're getting a template, or if we need to
        // load the template - and be sure to cache the result.
        var fn = !/\W/.test(str) ?
          cache[str] = cache[str] ||
            tmpl(document.getElementById(str).innerHTML) :

          // Generate a reusable function that will serve as a template
          // generator (and which will be cached).
          new Function("obj",
            "var p=[],print=function(){p.push.apply(p,arguments);};" +

            // Introduce the data as local variables using with(){}
            "with(obj){p.push('" +

            // Convert the template into pure JavaScript
            str
              .replace(/[\r\t\n]/g, " ")
              .split("<%").join("\t")
              .replace(/((^|%>)[^\t]*)'/g, "$1\r")
              .replace(/\t=(.*?)%>/g, "',$1,'")
              .split("\t").join("');")
              .split("%>").join("p.push('")
              .split("\r").join("\\'")
          + "');}return p.join('');");

        // Provide some basic currying to the user
        return data ? fn( data ) : fn;
      };
    })();


    function extend () {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;
        if (typeof target === "boolean") {
            deep = target;
            target = arguments[1] || {};
            i = 2;
        }
        if (typeof target !== "object" && !jQuery.isFunction(target)) {
            target = {};
        }
        if (length === i) {
            target = this;
            --i;
        }
        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue;
                    }
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }
                        target[name] = jQuery.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    }


    var optionsTemplate = tmpl(
        '<div class="detailHandle">' +
            '<div class="detailCollapsed"></div>' +
            '<a name=\'<%= name %>\'><code class="symbol"><%= name %></code></a>' +
            '<%= type ? \': <span class="type">\' + type + \'</span>\' : \'\' %>' +
            '<%= defaultValue ? \'<span class="defaultValue">(default: \' + defaultValue + \')</span>\' : \'\' %>' +
        '</div>' +
        '<div class="detailBody">' +
            '<div class="desc"><%= desc %></div>' +
            '<% for (var exampleIdx = 0; typeof example != "undefined" && exampleIdx < example.length; exampleIdx++) { %>' +
                '<div class="code-sample">' +
                    '<h4 class="code-title">Example</h4>' +
                    '<pre class="code prettyprint lang-js"><code><%= example[exampleIdx] %></code></pre>' +
                '</div>' +
            '<% } %>' +
            '<%= typeof subOptions != "undefined" ? renderChildOptions(subOptions) : "" %>' +
        '</div>'
    );

    function sectionDistribution(options) {
        var result = {};

        // nest options
        for (var idx = 0; idx < ownOptions.length; idx++) {
            var currentName = ownOptions[idx].name;

            var nameSplit = currentName.split('.');

            var currentNamespace = result;

            for (var j = 0; j < nameSplit.length; j++) {
                currentNamespace = currentNamespace[nameSplit[j]] = currentNamespace[nameSplit[j]] || { index: idx };
            }
        }

        return result;
    }

    function renderOptions (options) {
        var html = "";

        for (var i in options) {
            html += optionsTemplate(extend({
                renderChildOptions: renderOptions
            }, options[i]));
        }

        return html;
    }
!}

        <!-- help-data -->

<if test="defined(ownOptions) && ownOptions.length">
    {# options are rendered through js + micro-templates in order to achieve recursive template rendering #}
    {+ renderOptions(ownOptions) +}
</if>
