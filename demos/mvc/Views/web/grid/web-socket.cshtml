<div id="example" class="k-content">
    <div id="grid" style="margin-bottom:20px"></div>
    <script>
        $(function(){
            var host = "wss://kendoui-ws-demo.herokuapp.com";
            var ws = new WebSocket(host);

            //Bind the grid when the socket connects
            ws.onopen = function() {
                $("#grid").data("kendoGrid").dataSource.fetch();
            };

            //Close the socket when the browser window is closed.
            window.onbeforeunload = function() {
                ws.close();
            }

            //Helper function to send data through the socket
            function send(ws, request, callback) {
                //Assign unique id to the request. Will use that to distinguish the response.
                request.id = kendo.guid();

                //Listen to the "message" event to get server response
                ws.addEventListener("message", function(e) {
                    var result = JSON.parse(e.data);

                    //Check if the response is for the current request
                    if (result.id == request.id) {
                        //Stop listening
                        ws.removeEventListener("message", arguments.callee);

                        //Invoke the callback with the result
                        callback(result);
                    }
                });

                //Send the data to the server
                ws.send(JSON.stringify(request));
            }

            $("#grid").kendoGrid({
                height: 300,
                autoBind: false,
                editable: true,
                sortable: true,
                columns: [
                    { field: "UnitPrice" },
                    { field: "ProductName" },
                    { command: "destroy", width: 100}
                ],
                toolbar: ["create"],
                dataSource: {
                    autoSync: true,
                    schema: {
                        model: {
                            id: "ProductID",
                            fields: {
                                "ProductID": { editable: false, nullable: true },
                                "CreatedAt": { type: "date" },
                                "UnitPrice": { type: "number" }
                            }
                        },
                        data: "data"
                    },
                    sort: [ { field: "CreatedAt", dir: "desc" }],
                    transport: {
                        push: function(options) {
                            //Listen to the "message" event fired when the server pushes data
                            ws.addEventListener("message", function(e) {
                                var result = JSON.parse(e.data);

                                //Check what the push type is and invoke the corresponding callback.
                                if (result.type == "push-update") {
                                    options.pushUpdate(result);
                                } else if (result.type == "push-destroy") {
                                    options.pushDestroy(result);
                                } else if (result.type == "push-create") {
                                    options.pushCreate(result);
                                }
                            });
                        },
                        read: function(options) {
                            var request = { type: "read" };

                            send(ws, request, options.success);
                        },
                        update: function(options) {
                            var request = { type: "update", data: [options.data] };

                            send(ws, request, options.success);
                        },
                        destroy: function(options) {
                            var request = { type: "destroy", data: [options.data] };

                            send(ws, request, options.success);
                        },
                        create: function(options) {
                            var request = { type: "create", data: [options.data] };

                            send(ws, request, options.success);
                        }
                    }
                }
            });
        });
    </script>
    <div class="configuration-horizontal">
        <span class="configHead">Information</span>
        <p>
            This demo demonstrates real-time push-notifications from a WebSocket.
        </p>
        <p>
            To see the real-time updates:
        </p>
        <ol>
            <li>Open this page in another browser window by clicking <a href="./web-socket.html" target="_new">here</a></li>
            <li>Create, update or destroy grid items.</li>
        </ol>
    </div>
</div>
