#!/usr/bin/env node

var xml = require("libxmljs"),
    fs = require("fs"),
    path = require("path");

var rawApi = fs.readFileSync("wrappers/mvc/src/Kendo.Mvc/bin/Release/Kendo.Mvc.xml", "utf8");
var xmlDoc = xml.parseXmlString(rawApi);
var members = xmlDoc.find("//member")

function parseNamespace(namespace) {
    var namespaceRegExp = new RegExp("(\\w):" + namespace.replace(/\./g, "\\.") + "\\.([^\\.]+)\\.");
    var types = {};

    members.forEach(function(member) {
        var name = member.attr("name").value();
        var type;
        var kind;
        var fullName;

        if (namespaceRegExp.test(name)) {
            kind = RegExp.$1;
            fullName = namespace + "." + RegExp.$2;
            type = types[fullName];

            if (!type) {
                types [fullName] = type = {};
                type.name = fullName;
                type.methods = [];
                type.properties = [];
            }

            if (kind == "M") {
                var method = parseMethod(member);

                if (!isEmpty(method)) {
                    method.name = memberName(fullName, name)
                    type.methods.push(method);
                }
            }
        }
    });

    return types;
}


function memberName(typeName, name) {
    return name.replace(/\w:/, "").substring(typeName.length + 1);
}

function parseMethod(element) {
    var result = {};
    var summary = element.get("summary");

    if (summary) {
        result.summary = summary.text().trim();
    }

    return result;
}

function isEmpty(object) {
    for (var member in object) {
        return false;
    }

    return true;
}


var types = parseNamespace("Kendo.Mvc.UI.Fluent");

console.log(types["Kendo.Mvc.UI.Fluent.WindowBuilder"].methods);

// vim: ft=javascript
