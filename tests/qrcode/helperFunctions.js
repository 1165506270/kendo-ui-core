(function() {
    var dataviz = kendo.dataviz,
        functions = dataviz.QRCodeFunctions,
        fields = dataviz.QRCodeFields,
        encoding,
        NUMERIC = "numeric",
        ALPHA_NUMERIC = "alphanumeric",
        BYTE = "byte",
        formatIndicators = {
            L: "01",
            M: "00",
            Q: "11",
            H: "10"
        },
        formatInformationEncodedStrings = {
            "L": ["111011111000100", "111001011110011", "111110110101010", "111100010011101", "110011000101111", "110001100011000", "110110001000001", "110100101110110"],
            "M": ["101010000010010", "101000100100101", "101111001111100", "101101101001011", "100010111111001", "100000011001110", "100111110010111", "100101010100000"],
            "Q": ["011010101011111", "011000001101000", "011111100110001", "011101000000110", "010010010110100", "010000110000011", "010111011011010", "010101111101101"],
            "H": ["001011010001001", "001001110111110", "001110011100111", "001100111010000", "000011101100010", "000001001010101", "000110100001100", "000100000111011"]
        },
        versionInformationEncodedStrings = {"7":"000111110010010100","8":"001000010110111100","9":"001001101010011001","10":"001010010011010011","11":"001011101111110110","12":"001100011101100010","13":"001101100001000111","14":"001110011000001101","15":"001111100100101000","16":"010000101101111000","17":"010001010001011101","18":"010010101000010111","19":"010011010100110010","20":"010100100110100110","21":"010101011010000011","22":"010110100011001001","23":"010111011111101100","24":"011000111011000100","25":"011001000111100001","26":"011010111110101011","27":"011011000010001110","28":"011100110000011010","29":"011101001100111111","30":"011110110101110101","31":"011111001001010000","32":"100000100111010101","33":"100001011011110000","34":"100010100010111010","35":"100011011110011111","36":"100100101100001011","37":"100101010000101110","38":"100110101001100100","39":"100111010101000001","40":"101000110001101001"},
        generatorPolynomials = {
            7: [21, 102, 238, 149, 146, 229, 87, 0],
            10: [45, 32, 94, 64, 70, 118, 61, 46, 67, 251, 0],
            13: [78, 140, 206, 218, 130, 104, 106, 100, 86, 100, 176, 152, 74, 0],
            15: [105, 99, 5, 124, 140, 237, 58, 58, 51, 37, 202, 91, 61, 183, 8, 0],
            16: [120, 225, 194, 182, 169, 147, 191, 91, 3, 76, 161, 102, 109, 107, 104, 120, 0],
            17: [136, 163, 243, 39, 150, 99, 24, 147, 214, 206, 123, 239, 43, 78, 206, 139, 43, 0],
            18: [153, 96, 98, 5, 179, 252, 148, 152, 187, 79, 170, 118, 97, 184, 94, 158, 234, 215, 0],
            20: [190, 188, 212, 212, 164, 156, 239, 83, 225, 221, 180, 202, 187, 26, 163, 61, 50, 79, 60, 17, 0],
            22: [231, 165, 105, 160, 134, 219, 80, 98, 172, 8, 74, 200, 53, 221, 109, 14, 230, 93, 242, 247, 171, 210, 0],
            24: [21, 227, 96, 87, 232, 117, 0, 111, 218, 228, 226, 192, 152, 169, 180, 159, 126, 251, 117, 211, 48, 135, 121, 229, 0],
            26: [70, 218, 145, 153, 227, 48, 102, 13, 142, 245, 21, 161, 53, 165, 28, 111, 201, 145, 17, 118, 182, 103, 2, 158, 125, 173, 0],
            28: [123, 9, 37, 242, 119, 212, 195, 42, 87, 245, 43, 21, 201, 232, 27, 205, 147, 195, 190, 110, 180, 108, 234, 224, 104, 200, 223, 168, 0],
            30: [180, 192, 40, 238, 216, 251, 37, 156, 130, 224, 193, 226, 173, 42, 125, 222, 96, 239, 86, 110, 48, 50, 182, 179, 31, 216, 152, 145, 173, 41, 0],
            32: [241, 220, 185, 254, 52, 80, 222, 28, 60, 171, 69, 38, 156, 80, 185, 120, 27, 89, 123, 242, 32, 138, 138, 209, 67, 4, 167, 249, 190, 106, 6, 10, 0],
            34: [51, 129, 62, 98, 13, 167, 129, 183, 61, 114, 70, 56, 103, 218, 239, 229, 158, 58, 125, 163, 140, 86, 193, 113, 94, 105, 19, 108, 21, 26, 94, 146, 77, 111, 0],
            36: [120, 30, 233, 113, 251, 117, 196, 121, 74, 120, 177, 105, 210, 87, 37, 218, 63, 18, 107, 238, 248, 113, 152, 167, 0, 115, 152, 60, 234, 246, 31, 172, 16, 98, 183, 200, 0],
            40: [15, 35, 53, 232, 20, 72, 134, 125, 163, 47, 41, 88, 114, 181, 35, 175, 7, 170, 104, 226, 174, 187, 26, 53, 106, 235, 56, 163, 57, 247, 161, 128, 205, 128, 98, 252, 161, 79, 116, 59, 0],
            42: [96, 50, 117, 194, 162, 171, 123, 201, 254, 237, 199, 213, 101, 39, 223, 101, 34, 139, 131, 15, 147, 96, 106, 188, 8, 230, 84, 110, 191, 221, 242, 58, 3, 0, 231, 137, 18, 25, 230, 221, 103, 250, 0],
            44: [181, 73, 102, 113, 130, 37, 169, 204, 147, 217, 194, 52, 163, 68, 114, 118, 126, 224, 62, 143, 78, 44, 238, 1, 247, 14, 145, 9, 123, 72, 25, 191, 243, 89, 188, 168, 55, 69, 246, 71, 121, 61, 7, 190, 0],
            46: [15, 82, 19, 223, 202, 43, 224, 157, 25, 52, 174, 119, 245, 249, 8, 234, 104, 73, 241, 60, 96, 4, 1, 36, 211, 169, 216, 135, 16, 58, 44, 129, 113, 54, 5, 89, 99, 187, 115, 202, 224, 253, 112, 88, 94, 112, 0],
            48: [108, 34, 39, 163, 50, 84, 227, 94, 11, 191, 238, 140, 156, 247, 21, 91, 184, 120, 150, 95, 206, 107, 205, 182, 160, 135, 111, 221, 18, 115, 123, 46, 63, 178, 61, 240, 102, 39, 90, 251, 24, 60, 146, 211, 130, 196, 25, 228, 0],
            50: [205, 133, 232, 215, 170, 124, 175, 235, 114, 228, 69, 124, 65, 113, 32, 189, 42, 77, 75, 242, 215, 242, 160, 130, 209, 126, 160, 32, 13, 46, 225, 203, 242, 195, 111, 209, 3, 35, 193, 203, 99, 209, 46, 118, 9, 164, 161, 157, 125, 232, 0],
            52: [51, 116, 254, 239, 33, 101, 220, 200, 242, 39, 97, 86, 76, 22, 121, 235, 233, 100, 113, 124, 65, 59, 94, 190, 89, 254, 134, 203, 242, 37, 145, 59, 14, 22, 215, 151, 233, 184, 19, 124, 127, 86, 46, 192, 89, 251, 220, 50, 186, 86, 50, 116, 0],
            54: [156, 31, 76, 198, 31, 101, 59, 153, 8, 235, 201, 128, 80, 215, 108, 120, 43, 122, 25, 123, 79, 172, 175, 238, 254, 35, 245, 52, 192, 184, 95, 26, 165, 109, 218, 209, 58, 102, 225, 249, 184, 238, 50, 45, 65, 46, 21, 113, 221, 210, 87, 201, 26, 183, 0],
            56: [10, 61, 20, 207, 202, 154, 151, 247, 196, 27, 61, 163, 23, 96, 206, 152, 124, 101, 184, 239, 85, 10, 28, 190, 174, 177, 249, 182, 142, 127, 139, 12, 209, 170, 208, 135, 155, 254, 144, 6, 229, 202, 201, 36, 163, 248, 91, 2, 116, 112, 216, 164, 157, 107, 120, 106, 0],
            58: [123, 148, 125, 233, 142, 159, 63, 41, 29, 117, 245, 206, 134, 127, 145, 29, 218, 129, 6, 214, 240, 122, 30, 24, 23, 125, 165, 65, 142, 253, 85, 206, 249, 152, 248, 192, 141, 176, 237, 154, 144, 210, 242, 251, 55, 235, 185, 200, 182, 252, 107, 62, 27, 66, 247, 26, 116, 82, 0],
            60: [240, 33, 7, 89, 16, 209, 27, 70, 220, 190, 102, 65, 87, 194, 25, 84, 181, 30, 124, 11, 86, 121, 209, 160, 49, 238, 38, 37, 82, 160, 109, 101, 219, 115, 57, 198, 205, 2, 247, 100, 6, 127, 181, 28, 120, 219, 101, 211, 45, 219, 197, 226, 197, 243, 141, 9, 12, 26, 140, 107, 0],
            62: [106, 110, 186, 36, 215, 127, 218, 182, 246, 26, 100, 200, 6, 115, 40, 213, 123, 147, 149, 229, 11, 235, 117, 221, 35, 181, 126, 212, 17, 194, 111, 70, 50, 72, 89, 223, 76, 70, 118, 243, 78, 135, 105, 7, 121, 58, 228, 2, 23, 37, 122,0, 94, 214, 118, 248, 223, 71, 98, 113, 202, 65, 0],
            64: [231, 213, 156, 217, 243, 178, 11, 204, 31, 242, 230, 140, 108, 99, 63, 238, 242, 125, 195, 195, 140, 47, 146, 184, 47, 91, 216, 4, 209, 218, 150, 208, 156, 145, 24, 29, 212, 199, 93, 160, 53, 127, 26, 119, 149, 141, 78, 200, 254, 187, 204, 177, 123, 92, 119, 68, 49, 159, 158, 7, 9, 175, 51, 45, 0],
            66: [105, 45, 93, 132, 25, 171, 106, 67, 146, 76, 82, 168, 50, 106, 232, 34, 77, 217, 126, 240, 253, 80, 87, 63, 143, 121, 40, 236, 111, 77, 154, 44, 7, 95, 197, 169, 214, 72, 41, 101, 95, 111, 68, 178, 137, 65, 173, 95, 171, 197, 247, 139, 17, 81, 215, 13, 117, 46, 51, 162, 136, 136, 180, 222, 118, 5, 0],
            68: [238, 163, 8, 5, 3, 127, 184, 101, 27, 235, 238, 43, 198, 175, 215, 82, 32, 54, 2, 118, 225, 166, 241, 137, 125, 41, 177, 52, 231, 95, 97, 199, 52, 227, 89, 160, 173, 253, 84, 15, 84, 93, 151, 203, 220, 165, 202, 60, 52, 133, 205, 190, 101, 84, 150, 43, 254, 32, 160, 90, 70, 77, 93, 224, 33, 223, 159, 247, 0]
        },
        expectedErrorCodewords = [
            {
                errorCodewordsCount: 22,
                dataBlocks: [
                    [215, 246, 16, 88, 65, 111, 235, 65, 138, 118, 10, 43, 49, 70, 255, 5, 238, 181, 191, 74, 134, 120],
                    [213, 229, 15, 212, 63, 131, 55, 242, 86, 170, 1, 33, 229, 72, 1, 76, 48, 181, 233, 142, 18, 60],
                    [169, 193, 12, 103, 248, 244, 151, 248, 20, 39, 21, 102, 225],
                    [220, 193, 76, 158, 120, 127, 17, 23, 97, 33, 71],
                    [173, 189, 141, 153, 214, 159, 147, 74, 71, 38, 76, 64, 83, 75, 56, 166, 96, 197, 181, 104, 15, 54, 169, 91, 142, 30, 31, 211, 254, 71, 120, 96, 5, 133, 247, 205, 151, 38, 198, 247, 249, 233, 69, 249, 82, 141, 128, 215, 155, 248, 196, 114, 30, 55, 4, 218, 75, 101, 128, 190, 198, 66, 192, 6, 177, 61, 207, 83, 212, 211, 34, 23, 117, 53, 223, 13, 156, 105, 81, 229, 11, 84, 149, 182, 168, 128, 45],
                    [201, 125, 249, 100, 52, 182, 58, 125, 166, 117, 177, 207, 136, 239, 182, 123, 64, 153, 157, 191, 127, 37, 72, 255, 170, 122, 188, 59, 28, 154, 254, 99, 206, 16, 7, 78, 210, 128, 88, 115, 2, 133, 74, 57, 88, 130, 68, 59, 255, 209, 255, 240, 115, 27, 189, 204, 232, 92, 92, 164, 84, 209, 75, 192, 116, 199, 255, 79, 59, 232, 76, 109, 151, 6, 4, 34, 42, 63, 132, 222, 78, 81, 222, 55, 5, 23, 69, 164]],
                errorBlocks: [
                    ["01000010", "11100111", "10000011", "01011001", "11110110", "11001010", "00101100", "00101100", "00100101", "00100001", "10101111", "11100010", "11100011", "01110001", "11001110", "00100000", "11010100", "11001001", "11000100", "01011111", "00010000", "00001101"],
                    ["01000000", "00010010", "00100010", "00111001", "01000101", "01011100", "00011111", "10011001", "10001110", "10111000", "00010111", "11101010", "10110101", "00101101", "01110101", "00000001", "10110010", "00101100", "10010011", "01010101", "00011110", "11010101"],
                    ["11100011", "00010001", "10001100", "01001011", "01100111", "11110101", "01111111", "01110110", "01111111", "11100111", "11001100", "00111001", "11001010", "10100001", "11011000", "01110101", "11011111", "00111110", "11101010", "01011001", "01011001", "11001111"],
                    ["10011000", "01111100", "10101101", "10101011", "01011000", "01100110", "10010101", "10000001", "00011100", "11001010", "01000100", "10100010", "11100001", "00100000", "00001001", "01000111", "11001111", "11001000", "10011011", "10010111", "10011001", "00101100"],
                    ["10110010", "10100010", "11010011", "11111111", "10110011", "11001110", "10010011", "10100101", "01110001", "11000011", "01010001", "10000100", "11001001", "00011011", "01001000", "01101000", "00010001", "01010110", "00010100", "01110100", "01000011", "01010001"],
                    ["10111000", "11001101", "11000011", "01011000", "01111011", "00000010", "01000011", "11010111", "00101110", "01111100", "11000011", "01001100", "00001010", "10111001", "11001111", "10101010", "11011110", "01011011", "10010100", "01101111", "01011101", "01010011"]
                ]
            },
            {
                errorCodewordsCount: 28,
                dataBlocks: [
                    [80, 25, 165, 228, 174, 30, 145, 0, 221, 202, 61, 78, 8, 100, 183],
                    [128, 60, 127, 29, 94, 21, 51, 233, 179, 90, 197, 209, 101, 28, 1, 83, 32, 225, 173, 86, 138, 246],
                    [248, 87, 52, 46, 148, 30, 217, 108, 201, 168, 186, 81, 38, 65],
                    [147, 134, 15, 43, 4, 10, 5, 24, 47, 25, 174, 167, 55, 100, 23, 212, 193, 202, 100, 83, 93, 58, 182, 90, 126, 83, 166, 0, 115, 89, 157, 2, 241, 157, 88, 234, 251, 89, 111, 58, 140, 247, 242, 155, 217]
                ],
                errorBlocks: [
                    ["10010101", "01110010", "01111000", "10010011", "00100010", "11100010", "00000001", "11111000", "10111100", "11110101", "01110111", "01111001", "11101110", "00111010", "11011100", "11001001", "01100000", "10101010", "01101101", "11110010", "11001100", "00110100", "11011001", "01011010", "11011000", "11001011", "01010000", "01001000"],
                    ["10101101", "10110001", "10111100", "10010101", "00001000", "10100000", "10101100", "10110001", "10000110", "00101000", "10001011", "00011100", "10000110", "11100111", "11101001", "11111000", "01111000", "00001101", "10110011", "01010101", "10001000", "00011010", "10101100", "10000111", "10100110", "11000101", "10111000", "11100111"],
                    ["01100101", "10110011", "01101000", "01010110", "01011011", "01101000", "01110110", "10000010", "00110110", "11111010", "01110011", "10110111", "11011001", "10000000", "00001010", "00111000", "01010110", "00011000", "11011110", "00101101", "11101111", "01110010", "00111100", "10111011", "10010101", "10001111", "10100100", "00110010"],
                    ["00000101", "11111011", "10100001", "01001011", "10100101", "11110101", "11100001", "00010011", "01101000", "11110101", "01100110", "10000101", "11111010", "11100111", "01100100", "01000100", "00011110", "01000110", "01000100", "00110111", "01110011", "11110100", "00101000", "00111011", "01100011", "00111101", "11110111", "00000101"]
                ]
            },
            {
                errorCodewordsCount: 30,
                dataBlocks: [
                    [232,10,247,248,182,131,57,191,167,26,203,145,20,10,218,163,138,48,62,120,225,29,178,218,234,87,232,100,190,156,176,246,71,161,205,55,192,85,141,14,191,90,201,192,178,146,252,172,5,138,197,21,232,106,134,109,54,134,159,58,109,76,170,83,249,110,191,183,225,238,122,73,242,140,117,215,173,1,55,235,105,60,126,211,76,101,37,73,97,112,185,167,101,18,128,128,146,128,212,122,81,239,111,254,207,196,123,55,158,56,51,214,250,208,80,232],
                    [92, 183, 89, 242, 81, 50, 227, 186, 143, 81, 129, 63, 47, 105, 11, 12, 3, 205, 163, 178, 222, 28, 76, 170, 51, 154, 135, 245, 161, 137, 118, 49, 13, 25, 231, 252, 102, 182, 232, 66, 154, 108, 75, 110, 200, 49, 204, 86, 16, 27, 187],
                    [193,98,252,32,203,80,9,7,171,37,64,222,18,194,50,195,146,3,11,238,199,254,231,228,198,255,175,88,232,20,94,145,64,62,201,89,206,38,132,14,89,86,92,250,12,116,199,82,135,177,158,119,197,44,98,5,21,77,212,139,188,236,155,62,210,162,138,86,238,224,167,38,61,8,86,193,244,225,148,8,156,197,215,76,213,232,164,164,61,33,54,22,46,137,6,253,26,128,225,186,223,133,20,164,142,5,242,98,71,117,40,48,145,159,93],
                    [135,174,26,200,102,164,56,40,54,213,70,252,54,25,192,160,181,143,147,112,136,36,22,158,212,140,73,92,66,161,210,3,141,193,9,146,137,238,20,184,133,137,182,15,20,39,135,67,90,103,110,115,95,59,209,128,204,214,234,166,41,187,126,243,142,94,49,201,156,124,3,143,136,94,178,69,245,32,171,27,7,218,35,187,145,12,182,85,32,213,122,50,193,186,178,137,206,51,172,172,214,125,108,189,93,12,243,79,230,93,206,250,84,213,229,189],
                    [53,179,198,32,103,44,52,66,73,138,31,33,251,115,157,192,55,40,61,115,14,183,153,57,35,89,137,134,83,103,135,132,227,73,97,9,122,135,15,5,51,70,151,114,209,70,79,197,153,204,25,165,76,157,116,5,199,197,33,239,138,186,106,28,249,183,240,13,232,251,214,38,156,237,53,58,173,137,1,139,245,33,189,113,196,62,144,3,173,250,59,250,131,118,187,214,114,106,239,175,179,192,155,248,170,43,8,148,17,174,79,6,31,73,168,109,181,128,208,139,219,68],
                    [112,98,159,1,97,24,234,23,188,45,124,4,60,203,165,71,18,216,124,220,24,121,48,169,169,105,147,239,246,151,12,124,64,198,234,255,88,78,166,213,89,24,125,149,194,71,59,110,117,140,216,211,207,234,76,18,99,107,174,18,28,178,235,53,53,9,42,1,14,175,196,115,120,141,172,101,166,5,109,85,159,53,250,138,192,173,126,238,188,221,45,190,254,112,158,95,194,75,136,66,241,110,109,148,89,36,2,78,255,41,124,91,208,252,50,162,192,8,20,0,188,183,6]
                ],
                errorBlocks: [
                    ["11110011", "01011001", "00100011", "11010101", "11100001", "11110010", "01101110", "11100110", "11011000", "00110110", "00010100", "01011001", "10100001", "11011001", "00111011", "00100100", "10100011", "10110011", "00110111", "00110100", "10001010", "10110111", "00111111", "01100100", "11001101", "11011000", "00011010", "01000001", "11001011", "10110010"],
                    ["11010111", "00110100", "01110000", "10111000", "01011011", "11001001", "00111101", "11010110", "10101111", "10010001", "11111011", "00001100", "01010000", "10100001", "00111111", "11101111", "10011111", "00001111", "00011100", "01101010", "10011110", "11100011", "01000000", "10110010", "01010100", "10010001", "10000110", "10001110", "01111100", "00000011"],
                    ["01100101", "00101011", "00001100", "00101011", "11010100", "11001100", "11100111", "11111010", "01110000", "01010001", "01000110", "00101101", "10110100", "00110111", "01110111", "10111100", "01100101", "01011101", "11100001", "00111010", "00111110", "10001110", "10001100", "10101000", "11100001", "10011101", "00000101", "01010000", "00011101", "11110000"],
                    ["10110111", "00011000", "11100101", "00100011", "00011001", "00100100", "11011101", "10000001", "01000111", "00011100", "10001001", "11011110", "10101110", "10001010", "01011100", "11011011", "01101101", "11110111", "00001100", "10011110", "01000110", "10001000", "00011010", "00100001", "00010000", "01110101", "01010101", "01011010", "01110111", "00000010"],
                    ["10000011", "01010101", "00010100", "01110101", "11001000", "00101000", "01001010", "10000001", "01111010", "11110101", "11001000", "00110111", "01101001", "00001000", "10011011", "00001100", "11100010", "00110011", "01000100", "00111101", "00100000", "10011100", "10000111", "10101100", "10011110", "01010010", "01101100", "00001000", "11111110", "01001001"],
                    ["11011100", "00110010", "01110001", "01111011", "01110011", "01011001", "01010111", "00011010", "11010101", "01111101", "01100010", "01111010", "01000100", "10111100", "11001001", "01000111", "10100110", "11100101", "00011111", "01000011", "00001011", "11010001", "00110100", "11011100", "01110000", "11100111", "01001100", "11100100", "01010011", "10111001"]
                ]
            }
        ];

    module("helper functions tests", {

    });

    function toBitsString(value, length){
        var result = Number(value).toString(2);
        return new Array(length - result.length + 1).join(0) + result;
    }

    test("test format information encoding", function(){
        var correctFormatEncoding = true,
            fm = formatInformationEncodedStrings,
            formatString,
            expectedResult,
            result;

        for(var ecL in fm){
            for(var i = 0; i < fm[ecL].length; i++){
                formatString = formatIndicators[ecL] + toBitsString(i,3);
                result = functions.encodeFormatInformation(formatString);
                expectedResult = fm[ecL][i];
                ok(result == expectedResult, "generated format string for ec: " + ecL + " mask pattern: " + i);
            }
        }
    });

    test("test version information encoding", function(){
        var correctVersionEncoding = true,
            expectedResult,
            result;
        for(var i = 7; i <= 40; i++){
            result = functions.encodeVersionInformation(i);
            expectedResult = versionInformationEncodedStrings[i];
            ok(result == expectedResult, "generated version string for version: " +  i);
        }
    });

    test("test generated generator polynomials", function(){
        var result,
            expectedResult;
        for(var i in generatorPolynomials){
            result = dataviz.QRCodeFields.generatorPolynomials[i - 1];
            expectedResult = generatorPolynomials[i];
            ok(result.toString() == expectedResult.toString(), "generator polynomial of order: " +  i);
        }
    });

     test("test error codewords generation", function(){
        var expectedResult,
            result;
        for(var i = 0; i < expectedErrorCodewords.length; i++){
            var errorCodewordsCount = expectedErrorCodewords[i].errorCodewordsCount,
                dataCodewords = expectedErrorCodewords[i].dataBlocks,
                errorCodewords = expectedErrorCodewords[i].errorBlocks;
            for(var j = 0; j < dataCodewords.length;j++){
                result = functions.generateErrorCodewords(dataCodewords[j], errorCodewordsCount);
                expectedResult = errorCodewords[j];

                ok(result.toString() == expectedResult.toString(), "generated codewords for size " +  errorCodewordsCount);
            }
        }
    });

    function compareModes(actual, expected){
        if(actual.length != expected.length){
            return false;
        }

        for(var i=0;i< actual.length;i++){
            if(actual[i].mode != expected[i].mode){
                return false;
            }
        }
        return true;
    }

    test("test choosing the optimal modes based on the data", function(){
        var dataString = "",
            getModes = functions.getModes,
            result,
            expectedResult;

        dataString = "" + new Array(8).join("1") + "";
        expectedResult = [{mode: NUMERIC}];
        result = getModes(dataString);
        ok(compareModes(result, expectedResult), "choosing numeric");

        dataString = "" + new Array(9).join("1") + ".";
        expectedResult = [{mode: NUMERIC},{mode: ALPHA_NUMERIC}];
        result = getModes(dataString);
        ok(compareModes(result, expectedResult), "choosing initial numeric before alphanumeric");

        dataString = "" + new Array(6).join("1") + "a";
        expectedResult = [{mode: NUMERIC},{mode: BYTE}];
        result = getModes(dataString);
        ok(compareModes(result, expectedResult), "choosing initial numeric before byte");

        dataString = "." + new Array(18).join("1") + "A";
        expectedResult = [{mode: ALPHA_NUMERIC},{mode: NUMERIC},{mode: ALPHA_NUMERIC}];
        result = getModes(dataString);
        ok(compareModes(result, expectedResult), "switching to numeric after alpha");

        dataString = "a" + new Array(10).join("1") + "a";
        expectedResult = [{mode: BYTE},{mode: NUMERIC},{mode: BYTE}];
        result = getModes(dataString);
        ok(compareModes(result, expectedResult), "switching to numeric after byte");

        dataString = "" + new Array(8).join("1") + ".";
        expectedResult = [{mode: ALPHA_NUMERIC}];
        result = getModes(dataString);
        ok(compareModes(result, expectedResult), "choosing initial alphanumeric");

        dataString = "." + new Array(8).join("A") + "a";
        expectedResult = [{mode: ALPHA_NUMERIC},{mode: BYTE}];
        result = getModes(dataString);
        ok(compareModes(result, expectedResult), "choosing initial alphanumeric before byte");

        dataString = "a" + new Array(17).join(".") + "a";
        expectedResult = [{mode: BYTE},{mode: ALPHA_NUMERIC},{mode: BYTE}];
        result = getModes(dataString);
        ok(compareModes(result, expectedResult), "switching to alphanumeric after byte");

        dataString = "" + new Array(5).join("1") + "a";
        expectedResult = [{mode: BYTE}];
        result = getModes(dataString);
        ok(compareModes(result, expectedResult), "choosing initial byte before numeric");

        dataString = "." + new Array(7).join("A") + "a";
        expectedResult = [{mode: BYTE}];
        result = getModes(dataString);
        ok(compareModes(result, expectedResult), "choosing initial byte before alphanumeric");

    });

    test("test padding data string", function(){
        var data,
            result,
            expectedResult,
            padString = functions.padDataString;

        data = "11111111",
        expectedResult = data,
        result = padString(data, 1);

        equal(result, expectedResult, "no padding added");

        data = "11111111" + "111111",
        expectedResult = data + "00",
        result = padString(data, 2);

        equal(result, expectedResult, "incomplete terminator added");

        data = "11111111" + "1111",
        expectedResult = data + "0000",
        result = padString(data, 2);

        equal(result, expectedResult, "only terminator added");


        data = "11111111111",
        expectedResult = data + "0000" + "0",
        result = padString(data, 2);

        equal(result, expectedResult, "one padding zero added");

        data = "11111",
        expectedResult = data + "0000" + "0000000",
        result = padString(data, 2);

        equal(result, expectedResult, "seven padding zeroes added");

        data = "11111",
        expectedResult = data + "0000" + "0000000" + "11101100",
        result = padString(data, 3);

        equal(result, expectedResult, "first alternating codeword added");

        data = "11111",
        expectedResult = data + "0000" + "0000000" + "11101100" + "00010001",
        result = padString(data, 4);

        equal(result, expectedResult, "second alternating codeword added");


        data = "11111",
        expectedResult = data + "0000" + "0000000" + "11101100" + "00010001" + "11101100",
        result = padString(data, 5);

        equal(result, expectedResult, "alternating padding codewords");

    });
})();
